Def	Allows objects with incompatible interfaces to collaborate
Why?	Imagine that you’re creating a stock market monitoring app. The app downloads the stock data from multiple sources in XML format and then displays nice-looking charts and diagrams for the user.
	At some point, you decide to improve the app by integrating a smart 3rd-party analytics library. But there’s a catch: the analytics library only works with data in JSON format.


	You could change the library to work with XML. However, this might break some existing code that relies on the library. And worse, you might not have access to the library’s source code in the first place, making this approach impossible.
Solution	You can create an adapter. This is a special object that converts the interface of one object so that another object can understand it.
	An adapter wraps one of the objects to hide the complexity of conversion happening behind the scenes. The wrapped object isn’t even aware of the adapter.
	Adapters can not only convert data into various formats but can also help objects with different interfaces collaborate. Here’s how it works:
	        The adapter gets an interface, compatible with one of the existing objects.
	        Using this interface, the existing object can safely call the adapter’s methods.
	        Upon receiving a call, the adapter passes the request to the second object, but in a format and order that the second object expects.

Steps to create	Example : phone pe banks
	        1. Create main class
	        2. Create phonepe class
	        3. Create an adapter interface with few methods
	        4. Create yesbankadapter class and icicibankadapter class which implements bankadapter interface and has third party icicibank or yesbank class objects.
Applicability	Use the Adapter class when you want to use some existing class, but its interface isn’t compatible with the rest of your code.
	Use the pattern when you want to reuse several existing subclasses that lack some common functionality that can’t be added to the superclass.
Pros	Single Responsibility Principle.
	Open/Closed Principle.
Cons	The overall complexity of the code increases because you need to introduce a set of new interfaces and classes. Sometimes it’s simpler just to change the service class so that it matches the rest of your code.
Real Time example 	When you travel from the US to Europe for the first time, you may get a surprise when trying to charge your laptop. The power plug and sockets standards are different in different countries. That’s why your US plug won’t fit a German socket. The problem can be solved by using a power plug adapter that has the American-style socket and the European-style plug.
